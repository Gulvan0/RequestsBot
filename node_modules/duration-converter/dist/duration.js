"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Duration can easily convert between units. E.g '7 Weeks' to Micro Seconds.
 * Usage:
 * const sevenWeeks = new Duration('7 Weeks');
 * const milliseconds = sevenWeeks.MilliSeconds;
 *
 * @class Duration
 */
var Duration = /** @class */ (function () {
    function Duration(input) {
        this.milliSeconds = 0;
        if (!input) {
            return;
        }
        var parts = input.split(/([0-9]+\.?[0-9]*)/);
        var n = Number(parts[1]);
        if (isNaN(n) || parts[2].length === 0) {
            throw new Error("Error in input: '" + input + "'");
        }
        var unit = parts[2].trim().toLowerCase();
        switch (unit) {
            case "nanosecond":
            case "nanoseconds":
                this.NanoSeconds = n;
                return;
            case "microsecond":
            case "microseconds":
                this.MicroSeconds = n;
                return;
            case "millisecond":
            case "milliseconds":
                this.MilliSeconds = n;
                return;
            case "second":
            case "seconds":
                this.Seconds = n;
                return;
            case "minute":
            case "minutes":
                this.Minutes = n;
                return;
            case "hour":
            case "hours":
                this.Hours = n;
                return;
            case "day":
            case "days":
                this.Days = n;
                return;
            case "week":
            case "weeks":
                this.Weeks = n;
                return;
            case "month":
            case "months":
                this.Months = n;
                return;
            case "year":
            case "years":
                this.Years = n;
                return;
            case "decade":
            case "decades":
                this.Decades = n;
                return;
            case "century":
            case "centuries":
                this.Centuries = n;
                return;
            case "millennium":
            case "millenniums":
            case "millennia":
                this.Millenniums = n;
                return;
            default:
                throw new Error("Error in input: '" + input + "'");
        }
    }
    Object.defineProperty(Duration.prototype, "NanoSeconds", {
        get: function () {
            return this.MicroSeconds * 1000;
        },
        set: function (nanoSeconds) {
            this.MicroSeconds = nanoSeconds / 1000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "MicroSeconds", {
        get: function () {
            return this.milliSeconds * 1000;
        },
        set: function (microSeconds) {
            this.milliSeconds = microSeconds / 1000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "MilliSeconds", {
        get: function () {
            return this.milliSeconds;
        },
        set: function (milliSeconds) {
            this.milliSeconds = milliSeconds;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Seconds", {
        get: function () {
            return this.MilliSeconds / 1000;
        },
        set: function (seconds) {
            this.MilliSeconds = seconds * 1000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Minutes", {
        get: function () {
            return this.Seconds / 60;
        },
        set: function (minutes) {
            this.Seconds = minutes * 60;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Hours", {
        get: function () {
            return this.Minutes / 60;
        },
        set: function (hours) {
            this.Minutes = hours * 60;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Days", {
        get: function () {
            return this.Hours / 24;
        },
        set: function (days) {
            this.Hours = days * 24;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Weeks", {
        get: function () {
            return this.Days / 7;
        },
        set: function (weeks) {
            this.Days = weeks * 7;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Months", {
        get: function () {
            return this.Years * 12;
        },
        set: function (months) {
            this.Years = months / 12;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Years", {
        get: function () {
            return this.Days / 365;
        },
        set: function (years) {
            this.Days = years * 365;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Decades", {
        get: function () {
            return this.Years / 10;
        },
        set: function (decades) {
            this.Years = decades * 10;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Centuries", {
        get: function () {
            return this.Decades / 10;
        },
        set: function (centuries) {
            this.Decades = centuries * 10;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "Millenniums", {
        get: function () {
            return this.Centuries / 10;
        },
        set: function (millenniums) {
            this.Centuries = millenniums * 10;
        },
        enumerable: true,
        configurable: true
    });
    Duration.fromNanoseconds = function (nanoseconds) {
        var duration = new Duration();
        duration.NanoSeconds = nanoseconds;
        return duration;
    };
    Duration.fromMicroSeconds = function (microseconds) {
        var duration = new Duration();
        duration.MicroSeconds = microseconds;
        return duration;
    };
    Duration.fromMilliseconds = function (milliSeconds) {
        var duration = new Duration();
        duration.MilliSeconds = milliSeconds;
        return duration;
    };
    Duration.fromSeconds = function (seconds) {
        var duration = new Duration();
        duration.Seconds = seconds;
        return duration;
    };
    Duration.fromMinutes = function (minutes) {
        var duration = new Duration();
        duration.Minutes = minutes;
        return duration;
    };
    Duration.fromHours = function (hours) {
        var duration = new Duration();
        duration.Hours = hours;
        return duration;
    };
    Duration.fromDays = function (days) {
        var duration = new Duration();
        duration.Days = days;
        return duration;
    };
    Duration.fromWeeks = function (weeks) {
        var duration = new Duration();
        duration.Weeks = weeks;
        return duration;
    };
    Duration.fromMonths = function (months) {
        var duration = new Duration();
        duration.Months = months;
        return duration;
    };
    Duration.fromYears = function (years) {
        var duration = new Duration();
        duration.Years = years;
        return duration;
    };
    Duration.fromDecades = function (decades) {
        var duration = new Duration();
        duration.Decades = decades;
        return duration;
    };
    Duration.fromCenturies = function (centuries) {
        var duration = new Duration();
        duration.Centuries = centuries;
        return duration;
    };
    Duration.fromMillenniums = function (millenniums) {
        var duration = new Duration();
        duration.Millenniums = millenniums;
        return duration;
    };
    Duration.between = function (a, b) {
        var duration = new Duration();
        var aMilliseconds = a instanceof Date ? a.getTime() : a;
        var bMilliseconds = b instanceof Date ? b.getTime() : b;
        duration.MilliSeconds = Math.abs(aMilliseconds - bMilliseconds);
        return duration;
    };
    Duration.getters = function () {
        return [
            "NanoSeconds",
            "MicroSeconds",
            "MilliSeconds",
            "Seconds",
            "Minutes",
            "Hours",
            "Days",
            "Weeks",
            "Months",
            "Years",
            "Decades",
            "Centuries",
            "Millenniums",
        ];
    };
    Duration.isSingular = function (value) {
        return value % 100 !== 11 && value % 10 === 1;
    };
    Duration.toSingular = function (value) {
        return value.replace(/ies$/, "y").replace(/s$/, "");
    };
    Duration.prototype.toString = function () {
        for (var _i = 0, _a = Duration.getters().reverse(); _i < _a.length; _i++) {
            var getter = _a[_i];
            var test_1 = this[getter];
            if (test_1 >= 1) {
                var unit = Duration.isSingular(test_1)
                    ? Duration.toSingular(getter)
                    : getter;
                var formatted = test_1.toLocaleString(undefined, {
                    maximumFractionDigits: 2,
                });
                return formatted + " " + unit.toLowerCase();
            }
        }
        return this.MicroSeconds + " microseconds";
    };
    return Duration;
}());
exports.Duration = Duration;
