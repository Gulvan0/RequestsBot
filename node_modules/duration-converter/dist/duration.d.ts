export interface IDuration {
    NanoSeconds: number;
    MicroSeconds: number;
    MilliSeconds: number;
    Seconds: number;
    Minutes: number;
    Hours: number;
    Days: number;
    Weeks: number;
    Months: number;
    Years: number;
    Decades: number;
    Centuries: number;
    Millenniums: number;
}
/**
 * Duration can easily convert between units. E.g '7 Weeks' to Micro Seconds.
 * Usage:
 * const sevenWeeks = new Duration('7 Weeks');
 * const milliseconds = sevenWeeks.MilliSeconds;
 *
 * @class Duration
 */
export declare class Duration implements IDuration {
    NanoSeconds: number;
    MicroSeconds: number;
    MilliSeconds: number;
    Seconds: number;
    Minutes: number;
    Hours: number;
    Days: number;
    Weeks: number;
    Months: number;
    Years: number;
    Decades: number;
    Centuries: number;
    Millenniums: number;
    static fromNanoseconds(nanoseconds: number): Duration;
    static fromMicroSeconds(microseconds: number): Duration;
    static fromMilliseconds(milliSeconds: number): Duration;
    static fromSeconds(seconds: number): Duration;
    static fromMinutes(minutes: number): Duration;
    static fromHours(hours: number): Duration;
    static fromDays(days: number): Duration;
    static fromWeeks(weeks: number): Duration;
    static fromMonths(months: number): Duration;
    static fromYears(years: number): Duration;
    static fromDecades(decades: number): Duration;
    static fromCenturies(centuries: number): Duration;
    static fromMillenniums(millenniums: number): Duration;
    static between(a: Date | number, b: Date | number): Duration;
    static getters(): string[];
    private static isSingular;
    private static toSingular;
    private milliSeconds;
    constructor(input?: string);
    toString(): string;
}
