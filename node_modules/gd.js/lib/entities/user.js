"use strict";
/**
 * User utilities
 * @packageDocumentation
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchedUserCosmetics = exports.UserCosmetics = exports.Message = exports.SearchedMessage = exports.OutgoingFriendRequest = exports.IncomingFriendRequest = exports.FriendRequest = exports.LoggedInLevelComment = exports.LoggedInAccountComment = exports.AccountComment = exports.LevelComment = exports.Comment = exports.UserCreator = exports.StatlessSearchedUser = exports.SearchedUser = exports.LoggedInUser = exports.User = void 0;
var entityCreator_1 = __importDefault(require("./entityCreator"));
var level_1 = require("./level");
var util_1 = require("../util");
var sha1_1 = __importDefault(require("sha1"));
/**
 * Converts multiple datatypes into an account
 * @param creator The creator of the caller
 * @param id The identifier in some datatype
 * @returns The account ID from that identifier
 * @async
 * @internal
 */
var convertToAccountID = function (creator, id) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(typeof id === 'string')) return [3 /*break*/, 2];
                return [4 /*yield*/, creator.get(id)];
            case 1: return [2 /*return*/, (_a.sent()).accountID];
            case 2:
                if (id instanceof StatlessSearchedUser || id instanceof User)
                    return [2 /*return*/, id.accountID];
                return [2 /*return*/, id];
        }
    });
}); };
/**
 * A comment made by a Geometry Dash player
 */
var Comment = /** @class */ (function () {
    /**
     * Creates a comment from a server response
     * @param data The parsed data for the comment
     * @internal
     */
    function Comment(data) {
        this.text = util_1.gdDecodeBase64(data[2]);
        this.createdAt = util_1.generateDate(data[9]);
        this.id = +data[6];
        this.likes = +data[4];
        this.isSpam = !!+data[7];
    }
    return Comment;
}());
exports.Comment = Comment;
var AccountComment = /** @class */ (function (_super) {
    __extends(AccountComment, _super);
    /**
     * Creates info about an account comment
     * @param author The comment's author
     * @param rawData The raw data to parse
     * @internal
     */
    function AccountComment(author, rawData) {
        var _this = _super.call(this, util_1.parse(rawData, '~')) || this;
        _this.author = author;
        return _this;
    }
    return AccountComment;
}(Comment));
exports.AccountComment = AccountComment;
var LoggedInAccountComment = /** @class */ (function (_super) {
    __extends(LoggedInAccountComment, _super);
    function LoggedInAccountComment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes the comment from the Geometry Dash servers
     * @returns A promise that resolves with a boolean of whether deletion was successful
     * @async
     */
    LoggedInAccountComment.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.author.deleteAccountComment(this)];
            });
        });
    };
    return LoggedInAccountComment;
}(AccountComment));
exports.LoggedInAccountComment = LoggedInAccountComment;
var LevelComment = /** @class */ (function (_super) {
    __extends(LevelComment, _super);
    /**
     * Creates info about a level comment
     * @param _creator The level creator associated with this comment
     * @param author The comment's author
     * @param rawData The raw data to parse
     * @internal
     */
    function LevelComment(_creator, author, rawData) {
        var _this = this;
        var d = util_1.parse(rawData, '~');
        _this = _super.call(this, d) || this;
        _this.author = author;
        _this._creator = _creator;
        _this.levelID = +d[1];
        if (d[10] !== '0')
            _this.percent = +d[10];
        return _this;
    }
    LevelComment.prototype.getLevel = function (resolve) {
        if (resolve === void 0) { resolve = false; }
        return __awaiter(this, void 0, void 0, function () {
            var level;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._creator._client.levels.get(this.levelID)];
                    case 1:
                        level = _a.sent();
                        return [2 /*return*/, resolve ? level.resolve() : level];
                }
            });
        });
    };
    return LevelComment;
}(Comment));
exports.LevelComment = LevelComment;
var LoggedInLevelComment = /** @class */ (function (_super) {
    __extends(LoggedInLevelComment, _super);
    function LoggedInLevelComment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes this comment from the servers
     * @returns Whether the comment deletion was successful
     * @async
     */
    LoggedInLevelComment.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.author.deleteComment(this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return LoggedInLevelComment;
}(LevelComment));
exports.LoggedInLevelComment = LoggedInLevelComment;
/**
 * A friend request
 */
var FriendRequest = /** @class */ (function () {
    /**
     * Create data about a friend request
     * @param data The parsed data to evaluate
     * @internal
     */
    function FriendRequest(data) {
        this.id = +data[32];
        this.msg = util_1.gdDecodeBase64(data[35]);
        this.read = !+data[41];
    }
    return FriendRequest;
}());
exports.FriendRequest = FriendRequest;
/**
 * An outgoing friend request
 */
var OutgoingFriendRequest = /** @class */ (function (_super) {
    __extends(OutgoingFriendRequest, _super);
    /**
     * Creates info about an outgoing friend request
     * @param account The account that sent the friend request
     * @param creator The creator of the user the account belongs to
     * @param rawData The raw data to parse
     */
    function OutgoingFriendRequest(account, creator, rawData) {
        var _this = this;
        var data = util_1.parse(rawData);
        _this = _super.call(this, data) || this;
        _this.from = account;
        _this.to = new StatlessSearchedUser(creator, rawData);
        return _this;
    }
    /**
     * Cancels a friend request, deleting it from the server
     * @returns Whether the cancellation was successful
     * @async
     */
    OutgoingFriendRequest.prototype.cancel = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.from.cancelFriendRequest(this)];
            });
        });
    };
    return OutgoingFriendRequest;
}(FriendRequest));
exports.OutgoingFriendRequest = OutgoingFriendRequest;
var IncomingFriendRequest = /** @class */ (function (_super) {
    __extends(IncomingFriendRequest, _super);
    /**
     * Creates info about an incoming friend request
     * @param account The account that received the friend request
     * @param creator The creator of the user the account belongs to
     * @param rawData The raw data to parse
     * @internal
     */
    function IncomingFriendRequest(account, creator, rawData) {
        var _this = this;
        var data = util_1.parse(rawData);
        _this = _super.call(this, data) || this;
        _this.to = account;
        _this.from = new StatlessSearchedUser(creator, rawData);
        return _this;
    }
    /**
     * Mark a friend request as read
     * @returns Whether marking as read was successful
     * @async
     */
    IncomingFriendRequest.prototype.markAsRead = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.read;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.to.markFriendRequestAsRead(this)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2: return [2 /*return*/, _a];
                }
            });
        });
    };
    /**
     * Accept a friend request
     * @returns Whether accepting the friend request was successful
     * @async
     */
    IncomingFriendRequest.prototype.accept = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.to.acceptFriendRequest(this)];
            });
        });
    };
    /**
     * Rejects a friend request, deleting it from the server
     * @returns Whether the rejection was successful
     * @async
     */
    IncomingFriendRequest.prototype.reject = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.to.rejectFriendRequest(this)];
            });
        });
    };
    return IncomingFriendRequest;
}(FriendRequest));
exports.IncomingFriendRequest = IncomingFriendRequest;
var SearchedMessage = /** @class */ (function () {
    /**
     * Creates info about a searched message
     * @param account The account associated with this message
     * @param rawData The raw data to parse (or its parsed form)
     * @internal
     */
    function SearchedMessage(account, rawData) {
        var d = typeof rawData === 'string' ? util_1.parse(rawData) : rawData;
        this.id = +d[1];
        var otherAcc = {
            username: d[6],
            id: +d[3],
            accountID: +d[2]
        };
        var outgoing = !!+d[9];
        this.from = (outgoing ? account : otherAcc);
        this.to = (outgoing ? otherAcc : account);
        this.outgoing = outgoing;
        this.subject = util_1.gdDecodeBase64(d[4]);
        this.sentAt = util_1.generateDate(d[7]);
        this.read = !+d[8];
    }
    /**
     * Deletes this message from the server
     * @returns Whether the message deletion was successful
     * @async
     */
    SearchedMessage.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (this.outgoing ? this.from : this.to).deleteMessage(this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Resolves the message into a full message
     * @returns The full message from this searched message
     * @async
     */
    SearchedMessage.prototype.resolve = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (this.outgoing ? this.from : this.to).getFullMessage(this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SearchedMessage;
}());
exports.SearchedMessage = SearchedMessage;
var Message = /** @class */ (function (_super) {
    __extends(Message, _super);
    /**
     * Creates info about a message
     * @param account The account associated with this message
     * @param rawData The raw data to parse
     * @internal
     */
    function Message(account, rawData) {
        var _this = this;
        var d = util_1.parse(rawData);
        _this = _super.call(this, account, d) || this;
        _this.body = util_1.gdDecodeBase64(d[5]);
        return _this;
    }
    return Message;
}(SearchedMessage));
exports.Message = Message;
/** @internal */
var colors = [
    '#7dff00',
    '#00ff00',
    '#00ff7d',
    '#00ffff',
    '#007dff',
    '#0000ff',
    '#7d00ff',
    '#ff00ff',
    '#ff007d',
    '#ff0000',
    '#ff7d00',
    '#ffff00',
    '#ffffff',
    '#b900ff',
    '#ffb900',
    '#000000',
    '#00c8ff',
    '#afafaf',
    '#5a5a5a',
    '#ff7d7d',
    '#00af4b',
    '#007d7d',
    '#004baf',
    '#4b00af',
    '#7d007d',
    '#af004b',
    '#af4b00',
    '#7d7d00',
    '#4baf00',
    '#ff4b00',
    '#963200',
    '#966400',
    '#649600',
    '#009664',
    '#006496',
    '#640096',
    '#960064',
    '#960000',
    '#009600',
    '#000096',
    '#7dffaf',
    '#7d7dff'
];
/**
 * Generates a {@link GDColor} from a number returned by the Geometry Dash servers.
 * @param colorValue The color number from the Geometry Dash servers
 * @returns The {@link GDColor} representing the given color number
 * @internal
 */
var userColor = function (colorValue) { return ({
    raw: colorValue,
    parsed: colors[colorValue]
}); };
/** @internal */
var PERMISSIONS = ['User', 'Moderator', 'Elder Moderator'];
/**
 * Generates a {@link Permission} from a number returned by the Geometry Dash servers.
 * @param raw The permission number from the Geometry Dash servers
 * @returns The {@link Permission} representing the given permission number
 * @internal
 */
var generatePermission = function (raw) { return ({
    raw: raw,
    pretty: PERMISSIONS[raw]
}); };
/** @internal */
var SOCIALMAP = {
    youtube: 'https://youtube.com/channel/',
    twitch: 'https://twitch.tv/',
    twitter: 'https://twitter.com/'
};
/**
 * Generates a {@link SocialURL} from a path and type returned by the Geometry Dash servers.
 * @param path The path from the Geometry Dash servers
 * @param type The social media platform from the Geometry Dash servers
 * @returns The {@link SocialURL} representing the given social media
 * @internal
 */
var generateSocial = function (path, type) { return ({
    path: path,
    fullURL: SOCIALMAP[type] + path
}); };
/**
 * A Geometry Dash player's cosmetics
 */
var UserCosmetics = /** @class */ (function () {
    /** @internal */
    function UserCosmetics(
    /** @internal */
    _creator, 
    /** The player's raw cube number */
    cube, 
    /** The player's raw ship number */
    ship, 
    /** The player's raw ball number */
    ball, 
    /** The player's raw UFO number */
    ufo, 
    /** The player's raw wave number */
    wave, 
    /** The player's raw robot number */
    robot, 
    /** The player's raw glow number */
    glow, 
    /** The player's raw spider number */
    spider, explosion, 
    /** The colors the player uses */
    colors) {
        this._creator = _creator;
        this.cube = cube;
        this.ship = ship;
        this.ball = ball;
        this.ufo = ufo;
        this.wave = wave;
        this.robot = robot;
        this.glow = glow;
        this.spider = spider;
        this.colors = colors;
        if (!isNaN(explosion))
            this.explosion = explosion;
    }
    UserCosmetics.prototype.renderIcon = function (type, returnRaw) {
        if (type === void 0) { type = 'cube'; }
        if (returnRaw === void 0) { returnRaw = false; }
        return __awaiter(this, void 0, void 0, function () {
            var params, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = [
                            ['form', type],
                            ['icon', this[type].toString()],
                            ['col1', this.colors.primary.raw.toString()],
                            ['col2', this.colors.secondary.raw.toString()],
                            ['glow', this.glow.toString()],
                            ['noUser', '1']
                        ]
                            .map(function (_a) {
                            var x = _a[0], y = _a[1];
                            return x + '=' + y;
                        })
                            .join('&');
                        return [4 /*yield*/, this._creator._client.req("https://gdbrowser.com/icon/gd.js?" + params, {}, true)];
                    case 1:
                        response = _a.sent();
                        if (returnRaw)
                            return [2 /*return*/, response];
                        return [2 /*return*/, response.arrayBuffer()];
                }
            });
        });
    };
    return UserCosmetics;
}());
exports.UserCosmetics = UserCosmetics;
/**
 * A Geometry Dash player
 */
var User = /** @class */ (function () {
    /**
     * Constructs data about a Geometry Dash player
     * @param _creator The creator associated with this user
     * @param rawData The raw data returned from the Geometry Dash request for this user
     * @internal
     */
    function User(
    /** @internal */
    _creator, rawData) {
        this._creator = _creator;
        var d = util_1.parse(rawData);
        this.username = d[1];
        this.id = +d[2];
        this.accountID = +d[16];
        this.stats = {
            stars: +d[3],
            diamonds: +d[46],
            demons: +d[4],
            rank: +d[30],
            coins: {
                normal: +d[13],
                user: +d[17]
            },
            cp: +d[8]
        };
        var socials = {};
        if (d[20])
            socials.youtube = generateSocial(d[20], 'youtube');
        if (d[44])
            socials.twitter = generateSocial(d[44], 'twitter');
        if (d[45])
            socials.twitch = generateSocial(d[45], 'twitch');
        this.socials = socials;
        this.cosmetics = new UserCosmetics(_creator, +d[21], +d[22], +d[23], +d[24], +d[25], +d[26], +d[28], +d[43], +d[47], {
            primary: userColor(+d[10]),
            secondary: userColor(+d[11])
        });
        this.permissions = generatePermission(+d[49]);
    }
    User.prototype.getAccountComments = function (num) {
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, numToGet, comments, page, params, data, split;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = false;
                        if (!num) {
                            num = 1;
                            singleReturn = true;
                        }
                        numToGet = Math.ceil(num / 10);
                        comments = [];
                        page = 0;
                        _a.label = 1;
                    case 1:
                        if (!(page < numToGet)) return [3 /*break*/, 4];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            page: page,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJAccountComments20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, singleReturn ? null : []];
                        split = data.slice(0, data.indexOf('#')).split('|');
                        comments.push.apply(comments, split.map(function (str) {
                            return _this instanceof LoggedInUser
                                ? new LoggedInAccountComment(_this, str)
                                : new AccountComment(_this, str);
                        }));
                        if (split.length < 10)
                            return [3 /*break*/, 4];
                        _a.label = 3;
                    case 3:
                        page++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, singleReturn ? comments[0] || null : comments.slice(0, num)];
                }
            });
        });
    };
    User.prototype.getComments = function (byLikes, num) {
        if (byLikes === void 0) { byLikes = false; }
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, params, data, comments;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = false;
                        if (!num) {
                            num = 1;
                            singleReturn = true;
                        }
                        params = new util_1.GDRequestParams({
                            count: num,
                            userID: this.id,
                            mode: +byLikes,
                            page: 0,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJCommentHistory.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, singleReturn ? null : []];
                        comments = data
                            .slice(0, data.indexOf('#'))
                            .split('|')
                            .map(function (str) {
                            var comment = str.slice(0, str.indexOf(':'));
                            return _this instanceof LoggedInUser
                                ? new LoggedInLevelComment(_this._creator, _this, comment)
                                : new LevelComment(_this._creator, _this, comment);
                        });
                        return [2 /*return*/, singleReturn ? comments[0] : comments];
                }
            });
        });
    };
    User.prototype.getLevels = function (num) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._creator._client.levels.byCreator(this, {}, num)];
            });
        });
    };
    return User;
}());
exports.User = User;
/**
 * Likes an arbitrary Geometry Dash object
 * @param id The ID of the object to like
 * @param special The special string associated with this like type
 * @param type The like type
 * @param shouldLike Whather to like or not
 * @param accountID The account ID from which to like
 * @param gjp The GJP of the account
 * @param client The client to make the request from
 * @returns Whether liking was successful
 * @internal
 */
var like = function (id, special, type, shouldLike, accountID, gjp, client) { return __awaiter(void 0, void 0, void 0, function () {
    var rs, like, chk, params;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                rs = util_1.genRS();
                like = +shouldLike;
                chk = util_1.encrypt(sha1_1.default('' + special + id + like + type + rs + accountID + util_1.udid + util_1.uuid + util_1.likeSalt), util_1.likeKey);
                params = new util_1.GDRequestParams({
                    accountID: accountID,
                    gjp: gjp,
                    type: type,
                    special: special,
                    itemID: id,
                    like: like,
                    udid: util_1.udid,
                    uuid: util_1.uuid,
                    rs: rs,
                    chk: chk
                });
                params.authorize('db');
                return [4 /*yield*/, client.req('/likeGJItem211.php', {
                        method: 'POST',
                        body: params
                    })];
            case 1: return [2 /*return*/, ((_a.sent()) === '1')];
        }
    });
}); };
/**
 * A logged-in Geometry Dash player
 */
var LoggedInUser = /** @class */ (function (_super) {
    __extends(LoggedInUser, _super);
    function LoggedInUser(_creator, rawData, 
    /** @internal */
    _creds) {
        var _this = _super.call(this, _creator, rawData) || this;
        _this._creds = _creds;
        return _this;
    }
    /**
     * Post a comment to this account's page
     * @param msg The message to post
     * @returns The comment that was just created (may not be 100% accurate); null if it failed
     * @async
     */
    LoggedInUser.prototype.postAccountComment = function (msg) {
        return __awaiter(this, void 0, void 0, function () {
            var comment, params, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        comment = util_1.gdEncodeBase64(msg);
                        params = new util_1.GDRequestParams(__assign(__assign({}, this._creds), { comment: comment }));
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/uploadGJAccComment20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, null];
                        return [2 /*return*/, new LoggedInAccountComment(this, "2~" + comment + "~9~0 seconds~6~" + data + "~4~0~7~0")]; // best we can do
                }
            });
        });
    };
    /**
     * Post a comment to a level
     * @param level The level to post the comment on
     * @param msg The message to post
     * @param percent The percentage to post with the comment. This can be any integer (even above 100)
     * @returns The comment that was just created (may not be 100% accurate); null if it failed
     * @async
     */
    LoggedInUser.prototype.postComment = function (level, msg, percent) {
        return __awaiter(this, void 0, void 0, function () {
            var comment, chk, params, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (level instanceof level_1.SearchedLevel)
                            level = level.id;
                        if (!percent)
                            percent = 0;
                        comment = util_1.gdEncodeBase64(msg);
                        chk = util_1.encrypt(sha1_1.default(this._creds.userName + comment + level + percent + '0' + util_1.commentSalt), util_1.commentKey);
                        params = new util_1.GDRequestParams(__assign(__assign({}, this._creds), { levelID: level, comment: comment,
                            percent: percent,
                            chk: chk }));
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/uploadGJComment21.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, null];
                        return [2 /*return*/, new LoggedInLevelComment(this._creator, this, "2~" + comment + "~9~0 seconds~6~" + data + "~4~0~7~0~10~" + percent)];
                }
            });
        });
    };
    /**
     * Deletes an account comment from the server
     * @param commentID The comment (or its ID) to delete
     * @async
     */
    LoggedInUser.prototype.deleteAccountComment = function (commentID) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (commentID instanceof AccountComment) {
                            if (commentID.author.accountID !== this.accountID)
                                return [2 /*return*/, false];
                            commentID = commentID.id;
                        }
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            commentID: commentID
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/deleteGJAccComment20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    LoggedInUser.prototype.deleteComment = function (commentID, levelID) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (commentID instanceof LevelComment) {
                            if (commentID.author.accountID !== this.accountID)
                                return [2 /*return*/, false];
                            levelID = commentID.levelID;
                            commentID = commentID.id;
                        }
                        else if (levelID instanceof level_1.SearchedLevel) {
                            levelID = levelID.id;
                        }
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            commentID: commentID,
                            levelID: levelID
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/deleteGJComment20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Send a friend request to another player
     * @param id The account ID, username, user, or searched user to send a friend request to
     * @param msg The message to send with the friend request
     * @returns Whether the friend request sending was successful
     * @async
     */
    LoggedInUser.prototype.sendFriendRequest = function (id, msg) {
        if (msg === void 0) { msg = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var toAccountID, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, convertToAccountID(this._creator, id)];
                    case 1:
                        toAccountID = _a.sent();
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            toAccountID: toAccountID,
                            comment: util_1.gdEncodeBase64(msg)
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/uploadFriendRequest20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Sends a message to a friend
     * @param id The account ID, username, user, or searched user to message. Must be a friend of this account.
     * @param subject The subject of the message to send
     * @param body The body of the message to send
     * @returns Whether sending the message was successful
     * @async
     */
    LoggedInUser.prototype.sendMessage = function (id, subject, body) {
        return __awaiter(this, void 0, void 0, function () {
            var toAccountID, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, convertToAccountID(this._creator, id)];
                    case 1:
                        toAccountID = _a.sent();
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            toAccountID: toAccountID,
                            subject: util_1.gdEncodeBase64(subject),
                            body: util_1.gdEncodeBase64(body)
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/uploadGJMessage20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    LoggedInUser.prototype.getFriendRequests = function (num, outgoing) {
        if (num === void 0) { num = 10; }
        if (outgoing === void 0) { outgoing = false; }
        return __awaiter(this, void 0, void 0, function () {
            var numToGet, reqs, page, params, data, split;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        numToGet = Math.ceil(num / 10);
                        reqs = [];
                        page = 0;
                        _a.label = 1;
                    case 1:
                        if (!(page < numToGet)) return [3 /*break*/, 4];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            page: page,
                            getSent: +outgoing,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJFriendRequests20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2:
                        data = _a.sent();
                        if (['-1', '-2'].includes(data))
                            return [2 /*return*/, reqs];
                        split = data.slice(0, data.indexOf('#')).split('|');
                        reqs.push.apply(reqs, split.map(function (str) {
                            return outgoing
                                ? new OutgoingFriendRequest(_this, _this._creator, str)
                                : new IncomingFriendRequest(_this, _this._creator, str);
                        }));
                        if (split.length < 10)
                            return [3 /*break*/, 4];
                        _a.label = 3;
                    case 3:
                        page++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, reqs.slice(0, num)];
                }
            });
        });
    };
    LoggedInUser.prototype.getMessages = function (num, outgoing) {
        if (num === void 0) { num = 10; }
        if (outgoing === void 0) { outgoing = false; }
        return __awaiter(this, void 0, void 0, function () {
            var numToGet, msgs, page, params, data, split;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        numToGet = Math.ceil(num / 10);
                        msgs = [];
                        page = 0;
                        _a.label = 1;
                    case 1:
                        if (!(page < numToGet)) return [3 /*break*/, 4];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            page: page,
                            getSent: +outgoing,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJMessages20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2:
                        data = _a.sent();
                        if (['-1', '-2'].includes(data))
                            return [2 /*return*/, msgs];
                        split = data.slice(0, data.indexOf('#')).split('|');
                        msgs.push.apply(msgs, split.map(function (str) {
                            return outgoing ? new SearchedMessage(_this, str) : new SearchedMessage(_this, str);
                        }));
                        if (split.length < 10)
                            return [3 /*break*/, 4];
                        _a.label = 3;
                    case 3:
                        page++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, msgs.slice(0, num)];
                }
            });
        });
    };
    LoggedInUser.prototype.getFullMessage = function (messageID, outgoing) {
        return __awaiter(this, void 0, void 0, function () {
            var params, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (messageID instanceof SearchedMessage) {
                            if ((messageID.outgoing ? messageID.from : messageID.to).accountID !== this.accountID)
                                return [2 /*return*/, null];
                            outgoing = messageID.outgoing;
                            messageID = messageID.id;
                        }
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            messageID: messageID,
                            isSender: +outgoing
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/downloadGJMessage20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, null];
                        return [2 /*return*/, new Message(this, data)];
                }
            });
        });
    };
    LoggedInUser.prototype.deleteMessage = function (messageID, outgoing) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (messageID instanceof SearchedMessage) {
                            if ((messageID.outgoing ? messageID.from : messageID.to).accountID !== this.accountID)
                                return [2 /*return*/, false];
                            outgoing = messageID.outgoing;
                            messageID = messageID.id;
                        }
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            messageID: messageID,
                            isSender: +outgoing
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/deleteGJMessages20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Mark a friend request as read
     * @param fr The friend request to mark
     * @returns Whether marking as read was successful or not
     * @async
     */
    LoggedInUser.prototype.markFriendRequestAsRead = function (fr) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (fr.to.accountID !== this.accountID)
                            return [2 /*return*/, false];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            requestID: fr.id
                        });
                        params.authorize('db');
                        _a = fr;
                        return [4 /*yield*/, this._creator._client.req('/readGJFriendRequest20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, (_a.read =
                            (_b.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Accepts a friend request
     * @param fr The friend request to accept
     * @returns Whether accepting the friend request was successful
     * @async
     */
    LoggedInUser.prototype.acceptFriendRequest = function (fr) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (fr.to.accountID !== this.accountID)
                            return [2 /*return*/, false];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            requestID: fr.id,
                            targetAccountID: fr.from.accountID
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/acceptGJFriendRequest20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Rejects a friend request, deleting it from the server
     * @param fr The friend request to reject
     * @returns Whether the rejection was succesful
     * @async
     */
    LoggedInUser.prototype.rejectFriendRequest = function (fr) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (fr.to.accountID !== this.accountID)
                            return [2 /*return*/, false];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            targetAccountID: fr.from.accountID,
                            isSender: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/deleteGJFriendRequests20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Unfriends another player.
     * @param id The account ID, username, user, or searched user to message. Must be a friend of this account.
     * @returns Whether the unfriending was successful
     * @async
     */
    LoggedInUser.prototype.unfriend = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = util_1.GDRequestParams.bind;
                        _b = {
                            accountID: this.accountID,
                            gjp: this._creds.gjp
                        };
                        return [4 /*yield*/, convertToAccountID(this._creator, id)];
                    case 1:
                        params = new (_a.apply(util_1.GDRequestParams, [void 0, (_b.targetAccountID = _c.sent(),
                                _b)]))();
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/removeGJFriend20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2: return [2 /*return*/, ((_c.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Cancels a friend request, deleting it from the server
     * @param fr The friend request to cancel
     * @returns Whether the cancellation was succesful
     * @async
     */
    LoggedInUser.prototype.cancelFriendRequest = function (fr) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (fr.from.accountID !== this.accountID)
                            return [2 /*return*/, false];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            targetAccountID: fr.to.accountID,
                            isSender: 1
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/deleteGJFriendRequests20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Block a user
     * @param user The user to block
     * @returns Whether the blocking succeeded
     * @async
     */
    LoggedInUser.prototype.block = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = util_1.GDRequestParams.bind;
                        _b = {
                            accountID: this.accountID,
                            gjp: this._creds.gjp
                        };
                        return [4 /*yield*/, convertToAccountID(this._creator, user)];
                    case 1:
                        params = new (_a.apply(util_1.GDRequestParams, [void 0, (_b.targetAccountID = _c.sent(),
                                _b)]))();
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/blockGJUser20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2: return [2 /*return*/, ((_c.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Unblock a user
     * @param user The user to unblock
     * @returns Whether the unblocking succeeded
     * @async
     */
    LoggedInUser.prototype.unblock = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = util_1.GDRequestParams.bind;
                        _b = {
                            accountID: this.accountID,
                            gjp: this._creds.gjp
                        };
                        return [4 /*yield*/, convertToAccountID(this._creator, user)];
                    case 1:
                        params = new (_a.apply(util_1.GDRequestParams, [void 0, (_b.targetAccountID = _c.sent(),
                                _b)]))();
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/unblockGJUser20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2: return [2 /*return*/, ((_c.sent()) === '1')];
                }
            });
        });
    };
    /**
     * Finds all friends of this player
     * @returns An array of the player's friends
     * @async
     */
    LoggedInUser.prototype.getFriends = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            type: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJUserList20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, []];
                        return [2 /*return*/, data.split('|').map(function (str) { return new StatlessSearchedUser(_this._creator, util_1.parse(str)); })];
                }
            });
        });
    };
    /**
     * Finds the users that have been blocked by this player
     * @returns An array of blocked users
     * @async
     */
    LoggedInUser.prototype.getBlocked = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            type: 1
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJUserList20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, []];
                        return [2 /*return*/, data.split('|').map(function (str) { return new StatlessSearchedUser(_this._creator, util_1.parse(str)); })];
                }
            });
        });
    };
    /**
     * Gets the friends leaderboard
     * @returns The leaderboard, with position being index + 1
     * @async
     */
    LoggedInUser.prototype.getFriendsLeaderboard = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, data, leaderboard, me, insertIndex;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            gjp: this._creds.gjp,
                            type: 'friends',
                            page: 0,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJScores20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, []];
                        leaderboard = data
                            .slice(0, data.indexOf('#'))
                            .split('|')
                            .map(function (str) { return new SearchedUser(_this._creator, str); });
                        me = leaderboard.pop();
                        insertIndex = leaderboard.findIndex(function (val) { return val.stats.stars <= me.stats.stars; });
                        if (insertIndex === -1)
                            insertIndex = leaderboard.length;
                        leaderboard.splice(insertIndex, 0, me);
                        return [2 /*return*/, leaderboard];
                }
            });
        });
    };
    /**
     * Likes a Geometry Dash entity
     * @param id The object to like. This can be a level, account comment, or level comment
     * @returns Whether the liking succeeded
     * @async
     */
    LoggedInUser.prototype.like = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, id instanceof level_1.SearchedLevel
                        ? this.likeLevel(id)
                        : id instanceof LevelComment
                            ? this.likeComment(id)
                            : id instanceof AccountComment
                                ? this.likeAccountComment(id)
                                : false];
            });
        });
    };
    /**
     * Dislikes a Geometry Dash entity
     * @param id The object to dislike. This can be a level, account comment, or level comment
     * @returns Whether the disliking succeeded
     * @async
     */
    LoggedInUser.prototype.dislike = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, id instanceof level_1.SearchedLevel
                        ? this.dislikeLevel(id)
                        : id instanceof LevelComment
                            ? this.dislikeComment(id)
                            : id instanceof AccountComment
                                ? this.dislikeAccountComment(id)
                                : false];
            });
        });
    };
    /**
     * Likes a level
     * @param id The ID of the level to like (or the level itself)
     * @returns Whether the liking succeeded
     * @async
     */
    LoggedInUser.prototype.likeLevel = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (id instanceof level_1.SearchedLevel) {
                            id = id.id;
                        }
                        return [4 /*yield*/, like(id, 0, 1, true, this.accountID, this._creds.gjp, this._creator._client)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Dislikes a level
     * @param id The ID of the level to dislike (or the level itself)
     * @returns Whether the disliking succeeded
     * @async
     */
    LoggedInUser.prototype.dislikeLevel = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (id instanceof level_1.SearchedLevel) {
                            id = id.id;
                        }
                        return [4 /*yield*/, like(id, 0, 1, false, this.accountID, this._creds.gjp, this._creator._client)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    LoggedInUser.prototype.likeComment = function (id, levelID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (id instanceof LevelComment) {
                            if (id.author.accountID === this.accountID)
                                return [2 /*return*/, false];
                            levelID = id.levelID;
                            id = id.id;
                        }
                        else if (levelID instanceof level_1.SearchedLevel)
                            levelID = levelID.id;
                        return [4 /*yield*/, like(id, levelID, 2, true, this.accountID, this._creds.gjp, this._creator._client)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    LoggedInUser.prototype.dislikeComment = function (id, levelID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (id instanceof LevelComment) {
                            if (id.author.accountID === this.accountID)
                                return [2 /*return*/, false];
                            levelID = id.levelID;
                            id = id.id;
                        }
                        else if (levelID instanceof level_1.SearchedLevel)
                            levelID = levelID.id;
                        return [4 /*yield*/, like(id, levelID, 2, false, this.accountID, this._creds.gjp, this._creator._client)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    LoggedInUser.prototype.likeAccountComment = function (id, accountID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (id instanceof AccountComment) {
                            accountID = id.author.accountID;
                            if (accountID === this.accountID)
                                return [2 /*return*/, false];
                            id = id.id;
                        }
                        else if (accountID instanceof StatlessSearchedUser || accountID instanceof User)
                            accountID = accountID.accountID;
                        return [4 /*yield*/, like(id, accountID, 3, true, this.accountID, this._creds.gjp, this._creator._client)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    LoggedInUser.prototype.dislikeAccountComment = function (id, accountID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (id instanceof AccountComment) {
                            accountID = id.author.accountID;
                            if (accountID === this.accountID)
                                return [2 /*return*/, false];
                            id = id.id;
                        }
                        else if (accountID instanceof StatlessSearchedUser || accountID instanceof User)
                            accountID = accountID.accountID;
                        return [4 /*yield*/, like(id, accountID, 3, false, this.accountID, this._creds.gjp, this._creator._client)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    LoggedInUser.prototype.updateLevelDescription = function (levelID, desc) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (levelID instanceof level_1.SearchedLevel) {
                            if (levelID.creator.id !== this.id) {
                                return [2 /*return*/, false];
                            }
                            levelID = levelID.id;
                        }
                        params = new util_1.GDRequestParams(__assign(__assign({}, this._creds), { levelID: levelID, levelDesc: util_1.gdEncodeBase64(desc) }));
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/updateGJDesc20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1: return [2 /*return*/, ((_a.sent()) === '1')];
                }
            });
        });
    };
    return LoggedInUser;
}(User));
exports.LoggedInUser = LoggedInUser;
/** @internal */
var ICONTYPEMAP = ['cube', 'ship', 'ball', 'ufo', 'wave', 'robot', 'spider'];
/**
 * Cosmetics of a user found by a search
 */
var SearchedUserCosmetics = /** @class */ (function () {
    /**
     * Creates new info about a searched user's cosmetics
     * @param icon The number of the icon
     * @param iconType The type of the icon
     * @param colors The colors the player uses
     */
    function SearchedUserCosmetics(
    /** @internal */
    _creator, icon, iconType, colors) {
        this._creator = _creator;
        this.icon = {
            val: icon,
            type: iconType
        };
        this.colors = colors;
    }
    SearchedUserCosmetics.prototype.renderIcon = function (returnRaw) {
        if (returnRaw === void 0) { returnRaw = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, UserCosmetics.prototype.renderIcon.call((_a = {
                                glow: 0
                            },
                            _a[this.icon.type] = this.icon.val,
                            _a._creator = this._creator,
                            _a.colors = this.colors,
                            _a), this.icon.type, returnRaw)];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    return SearchedUserCosmetics;
}());
exports.SearchedUserCosmetics = SearchedUserCosmetics;
/**
 * Details about a Geometry Dash player returned from a search, without any stats
 */
var StatlessSearchedUser = /** @class */ (function () {
    /**
     * Creates a searched user
     * @param _creator The searched user's creator
     * @param rawData The raw data to parse
     */
    function StatlessSearchedUser(
    /** @internal */
    _creator, rawData) {
        this._creator = _creator;
        var d = typeof rawData == 'string' ? util_1.parse(rawData, '~') : rawData;
        this.username = d[1];
        var id = +d[2];
        if (id)
            this.id = id;
        this.accountID = +d[16];
        this.cosmetics = new SearchedUserCosmetics(_creator, +d[9], ICONTYPEMAP[+d[14]], {
            primary: userColor(+d[10]),
            secondary: userColor(+d[11])
        });
    }
    StatlessSearchedUser.prototype.getAccountComments = function (num) {
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, numToGet, comments, page, params, data, split;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = false;
                        if (!num) {
                            num = 1;
                            singleReturn = true;
                        }
                        numToGet = Math.ceil(num / 10);
                        comments = [];
                        page = 0;
                        _a.label = 1;
                    case 1:
                        if (!(page < numToGet)) return [3 /*break*/, 4];
                        params = new util_1.GDRequestParams({
                            accountID: this.accountID,
                            page: page,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJAccountComments20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 2:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, singleReturn ? null : []];
                        split = data.slice(0, data.indexOf('#')).split('|');
                        comments.push.apply(comments, split.map(function (str) { return new AccountComment(_this, str); }));
                        if (split.length < 10)
                            return [3 /*break*/, 4];
                        _a.label = 3;
                    case 3:
                        page++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, singleReturn ? comments[0] || null : comments.slice(0, num)];
                }
            });
        });
    };
    StatlessSearchedUser.prototype.getComments = function (byLikes, num) {
        if (byLikes === void 0) { byLikes = false; }
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, params, data, comments;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = false;
                        if (!num) {
                            num = 1;
                            singleReturn = true;
                        }
                        params = new util_1.GDRequestParams({
                            count: num,
                            userID: this.id,
                            mode: +byLikes,
                            page: 0,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJCommentHistory.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, singleReturn ? null : []];
                        comments = data
                            .slice(0, data.indexOf('#'))
                            .split('|')
                            .map(function (str) {
                            var comment = str.slice(0, str.indexOf(':'));
                            return new LevelComment(_this._creator, _this, comment);
                        });
                        return [2 /*return*/, singleReturn ? comments[0] : comments];
                }
            });
        });
    };
    StatlessSearchedUser.prototype.getLevels = function (num) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._creator._client.levels.byCreator(this, {}, num)];
            });
        });
    };
    /**
     * Converts the searched user into a full user
     * @returns The full data about the user
     * @async
     */
    StatlessSearchedUser.prototype.resolve = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._creator.get(this.accountID)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return StatlessSearchedUser;
}());
exports.StatlessSearchedUser = StatlessSearchedUser;
/**
 * Details about a Geometry Dash player returned from a search
 */
var SearchedUser = /** @class */ (function (_super) {
    __extends(SearchedUser, _super);
    /**
     * Creates a searched user with stats
     * @param _creator The searched user's raw data
     * @param rawData The raw data to parse
     */
    function SearchedUser(_creator, rawData) {
        var _this = this;
        var d = util_1.parse(rawData); // Inefficient, yes, but easier
        _this = _super.call(this, _creator, d) || this;
        _this.stats = {
            stars: +d[3],
            demons: +d[4],
            coins: {
                normal: +d[13],
                user: +d[17]
            },
            cp: +d[8]
        };
        return _this;
    }
    return SearchedUser;
}(StatlessSearchedUser));
exports.SearchedUser = SearchedUser;
/**
 * A creator for Geometry Dash players
 */
var UserCreator = /** @class */ (function (_super) {
    __extends(UserCreator, _super);
    function UserCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Find a player by accountID or username
     * @param id The account ID or username of the player to get
     * @returns The player with the provided account ID or username
     * @async
     */
    UserCreator.prototype.get = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = typeof id;
                        switch (_a) {
                            case 'number': return [3 /*break*/, 1];
                            case 'string': return [3 /*break*/, 3];
                            case 'object': return [3 /*break*/, 5];
                        }
                        return [3 /*break*/, 7];
                    case 1: return [4 /*yield*/, this.getByAccountID(id)];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3: return [4 /*yield*/, this.getByUsername(id)];
                    case 4: return [2 /*return*/, _b.sent()];
                    case 5:
                        if (!(id instanceof StatlessSearchedUser || id instanceof User)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.getByAccountID(id.accountID)];
                    case 6: return [2 /*return*/, _b.sent()];
                    case 7: return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Gets the information about a player using its account ID
     * @param id The account ID of the player to get
     * @returns The player with the provided account ID
     * @async
     */
    UserCreator.prototype.getByAccountID = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var params, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = new util_1.GDRequestParams({
                            targetAccountID: id
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._client.req('/getGJUserInfo20.php', { method: 'POST', body: params })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, null];
                        return [2 /*return*/, new User(this, data)];
                }
            });
        });
    };
    UserCreator.prototype.search = function (str, num) {
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, numToGet, searchedUsers, page, params, data, split;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = false;
                        if (!num) {
                            num = 1;
                            singleReturn = true;
                        }
                        numToGet = Math.ceil(num / 10);
                        searchedUsers = [];
                        page = 0;
                        _a.label = 1;
                    case 1:
                        if (!(page < numToGet)) return [3 /*break*/, 4];
                        params = new util_1.GDRequestParams({
                            str: str,
                            page: page,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._client.req('/getGJUsers20.php', { method: 'POST', body: params })];
                    case 2:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, singleReturn ? null : searchedUsers];
                        split = data.slice(0, data.indexOf('#')).split('|');
                        searchedUsers.push.apply(searchedUsers, split.map(function (str) { return new SearchedUser(_this, str); }));
                        if (split.length < 10)
                            return [3 /*break*/, 4];
                        _a.label = 3;
                    case 3:
                        page++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, singleReturn ? searchedUsers[0] || null : searchedUsers.slice(0, num)];
                }
            });
        });
    };
    UserCreator.prototype.getByUsername = function (str, resolve) {
        if (resolve === void 0) { resolve = true; }
        return __awaiter(this, void 0, void 0, function () {
            var possibleUser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.search(str)];
                    case 1:
                        possibleUser = _a.sent();
                        if (possibleUser && possibleUser.username.toLowerCase() === str.toLowerCase())
                            return [2 /*return*/, resolve ? possibleUser.resolve() : possibleUser];
                        return [2 /*return*/, null];
                }
            });
        });
    };
    UserCreator.prototype.getLeaderboard = function (creators, num) {
        if (creators === void 0) { creators = false; }
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, params, data, leaders;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = false;
                        if (!num) {
                            num = 1;
                            singleReturn = true;
                        }
                        params = new util_1.GDRequestParams({
                            count: num,
                            type: creators ? 'creators' : 'top',
                            page: 0,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._client.req('/getGJScores20.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, singleReturn ? null : []];
                        leaders = data
                            .slice(0, data.indexOf('#'))
                            .split('|')
                            .map(function (str) { return new SearchedUser(_this, str); });
                        return [2 /*return*/, singleReturn ? leaders[0] : leaders.slice(0, num)];
                }
            });
        });
    };
    /**
     * Log in to a Geometry Dash account
     * @param userCreds The username and password to log in with
     * @throws {TypeError} if credentials are invalid
     * @returns The logged in user associated with the provided credentials
     * @async
     */
    UserCreator.prototype.login = function (userCreds) {
        return __awaiter(this, void 0, void 0, function () {
            var params, data, accountIDStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = new util_1.GDRequestParams();
                        params.insertParams({
                            userName: userCreds.username,
                            password: userCreds.password,
                            udid: util_1.udid
                        });
                        params.authorize('account');
                        return [4 /*yield*/, this._client.req('/accounts/loginGJAccount.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            throw new TypeError('could not log in because the credentials were invalid');
                        accountIDStr = data.split(',')[0];
                        return [2 /*return*/, this.authorize({
                                userName: userCreds.username,
                                accountID: +accountIDStr,
                                gjp: util_1.encrypt(userCreds.password, util_1.accountKey)
                            })];
                }
            });
        });
    };
    /**
     * Log in to a Geometry Dash account using preprocessed credentials
     * @param creds The credentials to log in with
     * @throws {TypeError} if credentials are invalid
     * @returns The logged in user associated with the provided credentials
     * @async
     */
    UserCreator.prototype.authorize = function (creds) {
        return __awaiter(this, void 0, void 0, function () {
            var infoParams, infoData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        infoParams = new util_1.GDRequestParams({
                            targetAccountID: creds.accountID
                        });
                        infoParams.authorize('db');
                        return [4 /*yield*/, this._client.req('/getGJUserInfo20.php', {
                                method: 'POST',
                                body: infoParams
                            })];
                    case 1:
                        infoData = _a.sent();
                        if (infoData === '-1')
                            throw new TypeError('could not log in because the credentials were invalid');
                        return [2 /*return*/, new LoggedInUser(this, infoData, creds)];
                }
            });
        });
    };
    return UserCreator;
}(entityCreator_1.default));
exports.UserCreator = UserCreator;
