"use strict";
/**
 * Level utilities
 * @packageDocumentation
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultSong = exports.CustomSong = exports.SongAuthor = exports.LoggedInSearchedLevel = exports.LoggedInLevel = exports.LevelCreator = exports.Level = exports.SearchedLevel = void 0;
var util_1 = require("../util");
var entityCreator_1 = __importDefault(require("./entityCreator"));
var user_1 = require("./user");
// TODO: Try to add things to SongAuthor (like get all songs by this author)
/**
 * Information about a song author
 */
var SongAuthor = /** @class */ (function () {
    /** @internal */
    function SongAuthor(
    /** The author's name */
    name, 
    /** The author's Newgrounds ID */
    id) {
        this.name = name;
        this.id = id;
    }
    return SongAuthor;
}());
exports.SongAuthor = SongAuthor;
/** @internal */
var DEFAULT_SONGS = [
    ['Stay Inside Me', 'OcularNebula'],
    ['Stereo Madness', 'ForeverBound'],
    ['Back on Track', 'DJVI'],
    ['Polargeist', 'Step'],
    ['Dry Out', 'DJVI'],
    ['Base After Base', 'DJVI'],
    ["Can't Let Go", 'DJVI'],
    ['Jumper', 'Waterflame'],
    ['Time Machine', 'Waterflame'],
    ['Cycles', 'DJVI'],
    ['xStep', 'DJVI'],
    ['Clutterfunk', 'Waterflame'],
    ['Theory of Everything', 'DJ-Nate'],
    ['Electroman Adventures', 'Waterflame'],
    ['Clubstep', 'DJ-Nate'],
    ['Electrodynamix', 'DJ-Nate'],
    ['Hexagon Force', 'Waterflame'],
    ['Blast Processing', 'Waterflame'],
    ['Theory of Everything 2', 'DJ-Nate'],
    ['Geometrical Dominator', 'Waterflame'],
    ['Deadlocked', 'F-777'],
    ['Fingerdash', 'MDK'],
    ['The Seven Seas', 'F-777'],
    ['Viking Arena', 'F-777'],
    ['Airborne Robots', 'F-777'],
    ['The Challenge', 'RobTop'],
    ['Payload', 'Dex Arson'],
    ['Beast Mode', 'Dex Arson'],
    ['Machina', 'Dex Arson'],
    ['Years', 'Dex Arson'],
    ['Frontlines', 'Dex Arson'],
    ['Space Pirates', 'Waterflame'],
    ['Striker', 'Waterflame'],
    ['Round 1', 'Dex Arson'],
    ['Embers', 'Dex Arson'],
    ['Monster Dance Off', 'F-777'],
    ['Press Start', 'MDK'],
    ['Nock Em', 'Bossfight'],
    ['Power Trip', 'Boom Kitty']
];
/**
 * Information about a default song
 */
var DefaultSong = /** @class */ (function () {
    /**
     * Creates info about a song
     * @param _creator The associated level's creator
     * @param id The numeric ID of the song
     * @internal
     */
    function DefaultSong(_creator, id) {
        this._creator = _creator;
        this.isCustom = false;
        id += 1;
        var song = DEFAULT_SONGS[id];
        this.id = id;
        this.name = song[0];
        this.authorName = song[1];
    }
    return DefaultSong;
}());
exports.DefaultSong = DefaultSong;
/**
 * Information about a custom song
 */
var CustomSong = /** @class */ (function () {
    /**
     * Creates info about a song
     * @param _creator The associated level's creator
     * @param rawData The raw data to parse
     * @internal
     */
    function CustomSong(_creator, d) {
        this._creator = _creator;
        this.isCustom = true;
        this.id = +d[1];
        this.name = d[2];
        this.author = new SongAuthor(d[4], +d[3]);
        this.size = {
            raw: Math.floor(+d[5] * 1048576),
            pretty: d[5] + ' MB'
        };
        this.url = decodeURIComponent(d[10]);
    }
    return CustomSong;
}());
exports.CustomSong = CustomSong;
/** @internal */
var DIFFICULTY_MAP = (_a = {},
    _a[-1] = 'N/A',
    _a[0] = 'Auto',
    _a[1] = 'Easy',
    _a[2] = 'Normal',
    _a[3] = 'Hard',
    _a[4] = 'Harder',
    _a[5] = 'Insane',
    _a);
/** @internal */
var DEMON_DIFFICULTY_MAP = {
    0: 'Any',
    1: 'Easy Demon',
    2: 'Medium Demon',
    3: 'Hard Demon',
    4: 'Insane Demon',
    5: 'Extreme Demon'
};
/**
 * Gets the difficulty data for a given difficulty number returned by the server
 * @param diff The difficulty of the level
 * @param special Whether the level is a demon or an auto (if it is either of those)
 * @returns The difficulty as a full object
 * @internal
 */
var getDifficulty = function (diff, special) {
    var raw = (special === 'auto' ? 0 : diff === 0 ? -1 : diff / 10);
    return {
        raw: raw,
        pretty: special === 'demon' ? DEMON_DIFFICULTY_MAP[raw] : DIFFICULTY_MAP[raw]
    };
};
/** @internal */
var AWARDS = ['None', 'Star', 'Feature', 'Epic'];
/** @internal */
var ORBS = [0, 0, 50, 75, 125, 175, 225, 275, 350, 425, 500];
/**
 * Gets the full award object from an award value
 * @param isRated Whether the level is rated
 * @param feature The position of the level feature
 * @param epic Whether the level is epic
 * @returns The award for the level
 * @internal
 */
var getAward = function (isRated, feature, isEpic) {
    if (feature > 0) {
        var raw_1 = isEpic ? 3 : 2;
        return {
            raw: raw_1,
            position: feature,
            pretty: AWARDS[raw_1]
        };
    }
    var raw = isRated ? 1 : 0;
    return {
        raw: raw,
        pretty: AWARDS[raw]
    };
};
/** @internal */
var LEVEL_LENGTH_MAP = {
    0: 'Tiny',
    1: 'Short',
    2: 'Medium',
    3: 'Long',
    4: 'XL'
};
/**
 * Gets the length of a level
 * @param raw The raw length from the server
 * @returns The length of the level in object form
 * @internal
 */
var getLevelLength = function (raw) { return ({
    raw: raw,
    pretty: LEVEL_LENGTH_MAP[raw]
}); };
/**
 * Details about a level returned from a search
 */
var SearchedLevel = /** @class */ (function () {
    /**
     * Creates info about a Geometry Dash level.
     * @param rawData The raw data to parse
     * @param userData The parsed user data
     * @param songData The parsed song data
     * @internal
     */
    function SearchedLevel(
    /** @internal */
    _creator, rawData, userData, songData) {
        this._creator = _creator;
        var d = typeof rawData === 'string' ? util_1.parse(rawData) : rawData;
        this.name = d[2];
        this.id = +d[1];
        this.version = +d[5];
        this.gameVersion = +d[13];
        var songID = d[35];
        this.song =
            songID === '0'
                ? new DefaultSong(_creator, +d[12])
                : new CustomSong(_creator, (this._songData = songData.find(function (song) { return songID === song[1]; })));
        this.description = util_1.gdDecodeBase64(d[3]);
        var user = (this._userData = userData.find(function (el) { return el[0] === d[6]; }) || []);
        this.creator = {
            id: +d[6]
        };
        if (user.length)
            this.creator.accountID = +user[2];
        this.difficulty = {
            stars: +d[18],
            level: getDifficulty(+d[9], !!d[17] ? 'demon' : !!d[25] ? 'auto' : undefined),
            requestedStars: +d[39]
        };
        this.stats = {
            likes: +d[14],
            downloads: +d[10],
            objects: +d[45],
            length: getLevelLength(+d[15])
        };
        this.coins = {
            count: +d[37]
        };
        if (this.coins.count > 0)
            this.coins.areSilver = !!+d[38];
        this.award = getAward(this.difficulty.stars > 0, +d[19], !!+d[42]);
        this.orbs = ORBS[this.difficulty.stars];
        this.diamonds = this.difficulty.stars < 2 ? 0 : this.difficulty.stars + 2;
        var orig = +d[30];
        if (orig)
            this.original = orig;
    }
    /**
     * Get the full level from its searched counterpart.
     * @returns The full level
     * @async
     */
    SearchedLevel.prototype.resolve = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = new util_1.GDRequestParams({
                            levelID: this.id,
                            inc: 1,
                            extras: 0
                        });
                        params.authorize('db');
                        _a = Level.bind;
                        _b = [void 0, this._creator];
                        return [4 /*yield*/, this._creator._client.req('/downloadGJLevel22.php', { method: 'POST', body: params })];
                    case 1: return [2 /*return*/, new (_a.apply(Level, _b.concat([_c.sent(), this._userData,
                            this._songData])))()];
                }
            });
        });
    };
    /**
     * Gets the level's creator. Will only succeed if the creator is registered
     * @returns The creator if it was registered, otherwise null
     * @async
     */
    SearchedLevel.prototype.getCreator = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.creator.accountID) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._creator._client.users.getByAccountID(this.creator.id)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = null;
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    SearchedLevel.prototype.getComments = function (byLikes, num) {
        if (byLikes === void 0) { byLikes = false; }
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, params, data, comments;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = false;
                        if (!num) {
                            num = 1;
                            singleReturn = true;
                        }
                        params = new util_1.GDRequestParams({
                            count: num,
                            levelID: this.id,
                            mode: +byLikes,
                            page: 0,
                            total: 0
                        });
                        params.authorize('db');
                        return [4 /*yield*/, this._creator._client.req('/getGJComments21.php', {
                                method: 'POST',
                                body: params
                            })];
                    case 1:
                        data = _a.sent();
                        if (data === '-1')
                            return [2 /*return*/, singleReturn ? null : []];
                        comments = data
                            .slice(0, data.indexOf('#'))
                            .split('|')
                            .map(function (str) {
                            var _a = str.split(':'), comment = _a[0], user = _a[1];
                            return new user_1.LevelComment(_this._creator._client.users, new user_1.StatlessSearchedUser(_this._creator._client.users, user), '1~' + _this.id + '~' + comment);
                        });
                        return [2 /*return*/, singleReturn ? comments[0] : comments];
                }
            });
        });
    };
    return SearchedLevel;
}());
exports.SearchedLevel = SearchedLevel;
/**
 * Details about a level, including its full representation
 */
var Level = /** @class */ (function (_super) {
    __extends(Level, _super);
    /**
     * Creates information about a Geometry Dash level, including its string representation
     * @param _creator The creator of the level
     * @param rawData The raw data to parse
     * @param userData The parsed user data
     * @param songData The parsed song data
     * @internal
     */
    function Level(_creator, rawData, userData, songData) {
        var _this = this;
        var d = util_1.parse(rawData.slice(0, rawData.indexOf('#')));
        _this = _super.call(this, _creator, d, [userData], [songData]) || this;
        _this.uploadedAt = util_1.generateDate(d[28]);
        _this.updatedAt = util_1.generateDate(d[29]);
        if (d[27] === '0') {
            _this.copy = { copyable: false };
        }
        else {
            _this.copy = { copyable: true };
            if (d[27] !== '1')
                _this.copy.password = (+util_1.decrypt(d[27], util_1.levelKey).slice(1)).toString().padStart(4, '0'); // Working on GDPS support
        }
        _this.data = d[4];
        return _this;
    }
    Level.prototype.decodeData = function (full) {
        return __awaiter(this, void 0, void 0, function () {
            var raw, _a, rawHeader, rawParsedData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, util_1.decompress(this.data)];
                    case 1:
                        raw = _b.sent();
                        if (full) {
                            _a = raw.split(';'), rawHeader = _a[0], rawParsedData = _a.slice(1);
                            return [2 /*return*/, {
                                    raw: raw,
                                    parsed: {
                                        meta: util_1.parse(rawHeader, ','),
                                        objects: rawParsedData.map(util_1.parseObject)
                                    }
                                }];
                        }
                        return [2 /*return*/, { raw: raw }];
                }
            });
        });
    };
    return Level;
}(SearchedLevel));
exports.Level = Level;
/**
 * Details about a level returned from a search, created by a logged in user
 */
var LoggedInSearchedLevel = /** @class */ (function (_super) {
    __extends(LoggedInSearchedLevel, _super);
    /**
     * Creates info about a Geometry Dash level from a logged in user.
     * @param creator The level creator
     * @param rawData The raw data to parse
     * @param userData The parsed user data
     * @param songData The parsed song data
     * @internal
     */
    function LoggedInSearchedLevel(
    /** @internal */
    _creator, creator, rawData, userData, songData) {
        var _this = _super.call(this, _creator, rawData, userData, songData) || this;
        _this.creator = creator;
        return _this;
    }
    LoggedInSearchedLevel.prototype.getCreator = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.creator];
            });
        });
    };
    LoggedInSearchedLevel.prototype.resolve = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = new util_1.GDRequestParams({
                            levelID: this.id,
                            inc: 1,
                            extras: 0
                        });
                        params.authorize('db');
                        _a = LoggedInLevel.bind;
                        _b = [void 0, this._creator,
                            this.creator];
                        return [4 /*yield*/, this._creator._client.req('/downloadGJLevel22.php', { method: 'POST', body: params })];
                    case 1: return [2 /*return*/, new (_a.apply(LoggedInLevel, _b.concat([_c.sent(), this._userData,
                            this._songData])))()];
                }
            });
        });
    };
    /**
     * Updates the description of the level
     * @param desc The new description of the level
     * @returns Whether setting the new description succeeded
     */
    LoggedInSearchedLevel.prototype.updateDescription = function (desc) {
        return __awaiter(this, void 0, void 0, function () {
            var success;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.creator.updateLevelDescription(this, desc)];
                    case 1:
                        success = _a.sent();
                        if (success) {
                            this.description = desc;
                        }
                        return [2 /*return*/, success];
                }
            });
        });
    };
    return LoggedInSearchedLevel;
}(SearchedLevel));
exports.LoggedInSearchedLevel = LoggedInSearchedLevel;
/**
 * Details about a level, including its full representation and created by a logged in user
 */
var LoggedInLevel = /** @class */ (function (_super) {
    __extends(LoggedInLevel, _super);
    /**
     * Creates info about a Geometry Dash level from a logged in user.
     * @param creator The level creator
     * @param rawData The raw data to parse
     * @param userData The parsed user data
     * @param songData The parsed song data
     * @internal
     */
    function LoggedInLevel(_creator, creator, rawData, userData, songData) {
        var _this = this;
        var d = util_1.parse(rawData.slice(0, rawData.indexOf('#')));
        _this = _super.call(this, _creator, creator, rawData, [userData], [songData]) || this;
        _this.uploadedAt = util_1.generateDate(d[28]);
        _this.updatedAt = util_1.generateDate(d[29]);
        if (d[27] === '0') {
            _this.copy = { copyable: false };
        }
        else {
            _this.copy = { copyable: true };
            if (d[27] !== '1')
                _this.copy.password = (+util_1.decrypt(d[27], util_1.levelKey).slice(1)).toString().padStart(4, '0'); // Working on GDPS support
        }
        _this.data = d[4];
        return _this;
    }
    return LoggedInLevel;
}(LoggedInSearchedLevel));
exports.LoggedInLevel = LoggedInLevel;
Object.defineProperty(LoggedInLevel.prototype, 'decodeData', Object.getOwnPropertyDescriptor(Level.prototype, 'decodeData'));
/** @internal */
var ORDER_MAP = {
    likes: 0,
    downloads: 1,
    trending: 3,
    recent: 4,
    featured: 6,
    magic: 7,
    awarded: 11,
    hof: 16
};
/** @internal */
var DIFFICULTY_KEYS = Object.keys(DIFFICULTY_MAP).map(function (v) { return +v; });
/** @internal */
var DEMON_DIFFICULTY_KEYS = Object.keys(DEMON_DIFFICULTY_MAP).map(function (v) { return +v; });
/** @internal */
var LENGTH_KEYS = Object.keys(LEVEL_LENGTH_MAP);
/**
 * Converts a difficulty to a numeric ID
 * @param diff The difficulty to parse
 * @param isDemon Whether the user asked for a demon
 * @returns The difficulty from the string difficulty and whether to default to demon or not
 * @internal
 */
var diffToString = function (diff, isDemon) {
    if (!diff)
        return isDemon ? ['-2', 0] : ['-'];
    if (diff instanceof Array) {
        return isDemon
            ? ['-2', diff.length > 0 ? diffToString(diff[0], true)[1] : 0]
            : [diff.map(function (v) { return diffToString(v, true)[0]; }).join(',') || '-'];
    }
    if (isDemon === undefined)
        isDemon = typeof diff === 'string' && diff.toLowerCase().includes('demon');
    if (isDemon)
        return [
            '-2',
            typeof diff === 'number'
                ? diff
                : DEMON_DIFFICULTY_KEYS.find(function (id) { return DEMON_DIFFICULTY_MAP[id].toLowerCase() === diff.toLowerCase(); })
        ];
    if (typeof diff !== 'number')
        diff = DIFFICULTY_KEYS.find(function (id) { return DIFFICULTY_MAP[id].toLowerCase() === diff.toLowerCase(); });
    return [diff === -1 ? '0' : diff === 0 ? '-3' : diff.toString() || '-'];
};
/**
 * Converts a client length to a server-compatible length
 * @param len The length to parse
 * @returns A server-compatible length
 * @internal
 */
var lengthToString = function (len) {
    return len
        ? len instanceof Array
            ? len.map(lengthToString).join(',')
            : typeof len === 'number'
                ? len.toString()
                : LENGTH_KEYS.find(function (id) { return LEVEL_LENGTH_MAP[id].toLowerCase() === len.toLowerCase(); }) || '-'
        : '-';
};
/**
 * Gets the params for a certain award search
 * @param award The award to get
 * @returns The params to be inserted to match the given award request
 * @internal
 */
var awardToParams = function (award) {
    if ([3, 'Epic', 'epic'].includes(award))
        return { epic: 1, featured: 1 };
    if ([2, 'Feature', 'feature'].includes(award))
        return { featured: 1 };
    return {};
};
/**
 * Convert a client-provided order into an integer
 * @param order The order to parse
 * @returns The integer order
 * @internal
 */
var orderToInt = function (order) {
    return typeof order === 'number' ? order : ORDER_MAP[order];
};
/**
 * Gets the search params for a given search config
 * @param config The config to get the params for
 * @returns The params that work with the config
 * @internal
 */
var getSearchParams = function (_a) {
    var _b = _a.query, query = _b === void 0 ? '' : _b, difficulty = _a.difficulty, _c = _a.orderBy, orderBy = _c === void 0 ? 0 : _c, demon = _a.demon, award = _a.award, length = _a.length, _d = _a.original, original = _d === void 0 ? false : _d, _e = _a.twoPlayer, twoPlayer = _e === void 0 ? false : _e, _f = _a.coins, coins = _f === void 0 ? false : _f;
    if (typeof query === 'number') {
        query = query.toString();
    }
    else if (query instanceof Array) {
        query = query.join(',');
    }
    var _g = diffToString(difficulty, demon), diff = _g[0], demonFilter = _g[1];
    var len = lengthToString(length);
    var type = orderToInt(orderBy);
    var extraParams = awardToParams(award);
    var params = new util_1.GDRequestParams(__assign({ str: query, diff: diff,
        len: len,
        type: type }, extraParams));
    if (demonFilter)
        params.insertParams({ demonFilter: demonFilter });
    if (original)
        params.insertParams({ original: 1 });
    if (twoPlayer)
        params.insertParams({ twoPlayer: 1 });
    if (coins)
        params.insertParams({ coins: 1 });
    params.authorize('db');
    return params;
};
/**
 * A creator for levels
 */
var LevelCreator = /** @class */ (function (_super) {
    __extends(LevelCreator, _super);
    function LevelCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LevelCreator.prototype.get = function (levelID, resolve) {
        if (resolve === void 0) { resolve = false; }
        return __awaiter(this, void 0, void 0, function () {
            var level, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.search({ query: levelID })];
                    case 1:
                        level = _b.sent();
                        if (!resolve) return [3 /*break*/, 3];
                        return [4 /*yield*/, level.resolve()];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = level;
                        _b.label = 4;
                    case 4: return [2 /*return*/, _a];
                }
            });
        });
    };
    LevelCreator.prototype.byCreator = function (creator, config, num) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, id, params, numToGet, levels, _loop_1, this_1, i, state_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = !num;
                        if (singleReturn)
                            num = 1;
                        id = creator;
                        if (typeof creator !== 'number') {
                            id = creator.id;
                        }
                        params = getSearchParams(__assign({ query: '' + id, orderBy: 5 }, config));
                        numToGet = Math.ceil(num / 10);
                        levels = [];
                        _loop_1 = function (i) {
                            var data, _a, levelString, userString, songString, parsedUsers, parsedSongs;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        params.insertParams({
                                            page: i
                                        });
                                        return [4 /*yield*/, this_1._client.req('/getGJLevels21.php', { method: 'POST', body: params })];
                                    case 1:
                                        data = _b.sent();
                                        if (data === '-1')
                                            return [2 /*return*/, { value: singleReturn ? null : levels }];
                                        _a = data.split('#'), levelString = _a[0], userString = _a[1], songString = _a[2];
                                        parsedUsers = userString.split('|').map(function (str) { return str.split(':'); });
                                        parsedSongs = songString.split('~:~').map(function (str) { return util_1.parse(str, '~|~'); });
                                        levels.push.apply(levels, levelString
                                            .split('|')
                                            .map(function (str) {
                                            return creator instanceof user_1.LoggedInUser
                                                ? new LoggedInSearchedLevel(_this, creator, str, parsedUsers, parsedSongs)
                                                : new SearchedLevel(_this, str, parsedUsers, parsedSongs);
                                        }));
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < numToGet)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1(i)];
                    case 2:
                        state_1 = _a.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, singleReturn ? levels[0] : levels.slice(0, num)];
                }
            });
        });
    };
    LevelCreator.prototype.search = function (config, num) {
        return __awaiter(this, void 0, void 0, function () {
            var singleReturn, params, numToGet, levels, _loop_2, this_2, i, state_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        singleReturn = !num;
                        if (singleReturn)
                            num = 1;
                        params = getSearchParams(config);
                        numToGet = Math.ceil(num / 10);
                        levels = [];
                        _loop_2 = function (i) {
                            var data, _a, levelString, userString, songString, parsedUsers, parsedSongs;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        params.insertParams({
                                            page: i
                                        });
                                        return [4 /*yield*/, this_2._client.req('/getGJLevels21.php', { method: 'POST', body: params })];
                                    case 1:
                                        data = _b.sent();
                                        if (data === '-1')
                                            return [2 /*return*/, { value: singleReturn ? null : levels }];
                                        _a = data.split('#'), levelString = _a[0], userString = _a[1], songString = _a[2];
                                        parsedUsers = userString.split('|').map(function (str) { return str.split(':'); });
                                        parsedSongs = songString.split('~:~').map(function (str) { return util_1.parse(str, '~|~'); });
                                        levels.push.apply(levels, levelString.split('|').map(function (str) { return new SearchedLevel(_this, str, parsedUsers, parsedSongs); }));
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_2 = this;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < numToGet)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_2(i)];
                    case 2:
                        state_2 = _a.sent();
                        if (typeof state_2 === "object")
                            return [2 /*return*/, state_2.value];
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, singleReturn ? levels[0] : levels.slice(0, num)];
                }
            });
        });
    };
    return LevelCreator;
}(entityCreator_1.default));
exports.LevelCreator = LevelCreator;
