"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GDRequestParams = void 0;
var util_1 = require("./util");
Object.defineProperty(exports, "GDRequestParams", { enumerable: true, get: function () { return util_1.GDRequestParams; } });
var entities_1 = require("./entities");
var node_fetch_1 = __importDefault(require("./node-fetch"));
/** @internal */
var DEFAULT_CONFIG = {
    logLevel: 1,
    dbURL: 'http://www.boomlings.com/database',
    fetch: node_fetch_1.default
};
/**
 * Client for Geometry Dash requests.
 */
var Client = /** @class */ (function () {
    /**
     * Creates a client for Geometry Dash requests.
     * @param config The configuration for the client.
     */
    function Client(config) {
        if (!util_1.isServer && !config.corsURL) {
            throw new Error('critical: gd.js cannot function in the browser without a CORS proxy. Please provide a corsURL in the options to fix this issue.');
        }
        this.config = __assign(__assign({}, DEFAULT_CONFIG), config);
        this.users = new entities_1.UserCreator(this);
        this.levels = new entities_1.LevelCreator(this);
    }
    Client.prototype.req = function (url, _a, returnRaw) {
        var _b = _a === void 0 ? {} : _a, _c = _b.method, method = _c === void 0 ? 'GET' : _c, _d = _b.body, body = _d === void 0 ? null : _d;
        if (returnRaw === void 0) { returnRaw = false; }
        return __awaiter(this, void 0, void 0, function () {
            var sentBody, resp, data;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        sentBody = null;
                        if (body) {
                            sentBody = body.resolve();
                        }
                        return [4 /*yield*/, node_fetch_1.default((util_1.isServer ? '' : this.config.corsURL) +
                                (url.startsWith('http') ? '' : this.config.dbURL) +
                                url, {
                                method: method,
                                headers: { 'User-Agent': '' },
                                referrerPolicy: 'no-referrer',
                                body: sentBody
                            })];
                    case 1:
                        resp = _e.sent();
                        if (returnRaw)
                            return [2 /*return*/, resp];
                        return [4 /*yield*/, resp.text()];
                    case 2:
                        data = _e.sent();
                        this.verbose("Made a " + method + " request to " + url + ", response: " + data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /** @internal */
    Client.prototype.warn = function (str) {
        if (this.config.logLevel > 0)
            console.warn(str);
    };
    /** @internal */
    Client.prototype.log = function (str) {
        if (this.config.logLevel > 0)
            console.log(str);
    };
    /** @internal */
    Client.prototype.verbose = function (str) {
        if (this.config.logLevel > 1)
            console.log(str);
    };
    return Client;
}());
__exportStar(require("./entities"), exports);
exports.default = Client;
