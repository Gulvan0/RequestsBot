"use strict";
/**
 * Request parameter generator
 * @internal
 * @packageDocumentation
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @internal */
var USP = typeof URLSearchParams === 'undefined'
    ? eval('require')('url').URLSearchParams
    : URLSearchParams;
/**
 * The "secrets" used to authenticate with Geometry Dash servers
 * @remarks Only exist because RobTop doesn't know how to use tokens.
 * @internal
 */
var SECRETS = {
    db: 'Wmfd2893gb7',
    account: 'Wmfv3899gc9',
    moderator: 'Wmfp3879gc3'
};
/**
 * Parameters for Geometry Dash requests
 */
var GDRequestParams = /** @class */ (function () {
    /**
     * Creates a new group of Geometry Dash request parameters.
     * @param data The key-value pairs to insert
     */
    function GDRequestParams(data) {
        if (data === void 0) { data = {}; }
        this.data = __assign({ gdw: 0, gameVersion: 21, binaryVersion: 35 }, data);
    }
    /**
     * Inserts new parameters into the request parameter list.
     * @param data The key-value pairs to insert
     * @returns The new raw data
     */
    GDRequestParams.prototype.insertParams = function (data) {
        return Object.assign(this.data, data);
    };
    /**
     * Authorizes the parameters for a certain type of request.
     * @param type The type of request to authenticate for
     * @returns The new raw data
     */
    GDRequestParams.prototype.authorize = function (type) {
        if (type === void 0) { type = 'db'; }
        this.data.secret = SECRETS[type];
        return this.data;
    };
    /**
     * Resolves the request parameters to a URLSearchParams object.
     * @returns The parameters as a URLSearchParams object
     */
    GDRequestParams.prototype.resolve = function () {
        var _this = this;
        return new USP(Object.keys(this.data).map(function (paramName) { return [paramName, _this.data[paramName].toString()]; }));
    };
    return GDRequestParams;
}());
exports.default = GDRequestParams;
