"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gdEncodeBase64 = exports.gdDecodeBase64 = exports.decrypt = exports.encrypt = exports.cipher = void 0;
/**
 * Cipher and decryption methods
 * @internal
 * @packageDocumentation
 */
var node_encdec_1 = require("./node-encdec");
Object.defineProperty(exports, "gdEncodeBase64", { enumerable: true, get: function () { return node_encdec_1.gdEncodeBase64; } });
Object.defineProperty(exports, "gdDecodeBase64", { enumerable: true, get: function () { return node_encdec_1.gdDecodeBase64; } });
/**
 * Ciphers or deciphers a string with XOR encryption.
 * @param str The string to (de)cipher
 * @param key The key for the cipher
 * @returns The ciphered string
 * @internal
 */
var cipher = function (str, key) {
    return String.fromCodePoint.apply(String, str.split('').map(function (char, i) { return char.charCodeAt(0) ^ key.charCodeAt(i % key.length); }));
};
exports.cipher = cipher;
/**
 * Encodes a string in a format compatible with the Geometry Dash servers.
 * @param str The string to encrypt
 * @param key The key for the cipher
 * @returns The encrypted string, prepared for use in Geometry Dash
 * @internal
 */
var encrypt = function (str, key) { return node_encdec_1.gdEncodeBase64(cipher(str, key)); };
exports.encrypt = encrypt;
/**
 * Decodes a string encoded in a format generated by the Geometry Dash servers.
 * @param str The string to decrypt
 * @param key The key for the cipher
 * @returns The decrypted string
 * @internal
 */
var decrypt = function (str, key) { return cipher(node_encdec_1.gdDecodeBase64(str), key); };
exports.decrypt = decrypt;
