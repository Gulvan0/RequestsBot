/**
 * Level utilities
 * @packageDocumentation
 */
import { GDDate, ParsedData, ParsedLevelData } from '../util';
import Creator from './entityCreator';
import { User, LevelComment, StatlessSearchedUser, LoggedInUser } from './user';
/**
 * Information about a song author
 */
declare class SongAuthor {
    /** The author's name */
    name: string;
    /** The author's Newgrounds ID */
    id: number;
}
/**
 * Base definition for a song
 */
interface BaseSong {
    /** The name of the song */
    name: string;
    /** Whether or not the song is a custom song */
    isCustom: boolean;
}
/**
 * Information about a default song
 */
declare class DefaultSong implements BaseSong {
    private _creator;
    name: string;
    /** The default song's Geometry Dash ID */
    id: number;
    /** The song author's name */
    authorName: string;
    isCustom: false;
}
/**
 * Information about a custom song
 */
declare class CustomSong implements BaseSong {
    private _creator;
    name: string;
    /** The song's Newgrounds ID */
    id: number;
    /** The song's author */
    author: SongAuthor;
    /** The size of the song */
    size: {
        /** The raw number of bytes in the song. Note this may not be completely accurate. */
        raw: number;
        /** The size of the song in a human-readable format */
        pretty: string;
    };
    /** The URL containing the raw audio file */
    url: string;
    isCustom: true;
}
declare type Song = DefaultSong | CustomSong;
declare type Difficulty = 'N/A' | 'Auto' | 'Easy' | 'Normal' | 'Hard' | 'Harder' | 'Insane';
declare type DemonDifficulty = 'Any' | 'Easy Demon' | 'Medium Demon' | 'Hard Demon' | 'Insane Demon' | 'Extreme Demon';
declare type RawDemonDifficulty = 0 | 1 | 2 | 3 | 4 | 5;
declare type RawDifficulty = -1 | RawDemonDifficulty;
/** A level's difficulty */
declare type DifficultyLevel = {
    /**
     * The difficulty level as a number. -1 = N/A, 0 = Auto, 1 = Easy, 2 = Normal, 3 = Hard, 4 = Harder, 5 = Insane.
     * If demon (i.e. the number of stars is 10), 1 = Easy, 2 = Medium, 3 = Hard, 4 = Insane, 5 = Extreme
     */
    raw: RawDifficulty;
    /** The difficulty level as a pretty string */
    pretty: Difficulty | DemonDifficulty;
};
declare type RawAward = 0 | 1 | 2 | 3;
declare type PrettyAward = 'None' | 'Star' | 'Feature' | 'Epic';
/** A level's award */
declare type Award = {
    /**
     * The raw numeric representation of the award. 0 = none, 1 = star, 2 = feature, 3 = epic.
     * Note this is also the amount of creator points earned from the level
     */
    raw: RawAward;
    /** The level's position in the leaderboard. Note this will only exist if the  */
    position?: number;
    /** The pretty representation of the award */
    pretty: PrettyAward;
};
declare type RawLevelLength = 0 | 1 | 2 | 3 | 4;
declare type PrettyLevelLength = 'Tiny' | 'Short' | 'Medium' | 'Long' | 'XL';
/** The length of a level */
declare type LevelLength = {
    /** The raw numeric length */
    raw: RawLevelLength;
    /** The prettified length (as shown in the actual game) */
    pretty: PrettyLevelLength;
};
/** A level's coins */
declare type Coins = {
    /** The number of coins in the level */
    count: 0 | 1 | 2 | 3;
    /** Whether the coins are silver coins or not. Only exists if the level has coins */
    areSilver?: boolean;
};
/**
 * Details about a level returned from a search
 */
declare class SearchedLevel {
    /** The name of the level */
    name: string;
    /** The level's ID. If you are creating a new level, this is 0 */
    id: number;
    /** The level's version */
    version: number;
    /** The game version in which the level was built */
    gameVersion: number;
    /** The song the level uses */
    song: Song;
    /** The level's description */
    description: string;
    /** The level's creator */
    creator: {
        /** The creator's user ID. */
        id: number;
        /** The creator's account ID (if the user is registered) */
        accountID?: number;
    };
    /** The level's difficulty rating */
    difficulty: {
        /** The number of stars the level received. Will be 0 if it has no rating */
        stars: number;
        /** The difficulty level */
        level: DifficultyLevel;
        /** The number of stars the creator requested */
        requestedStars: number;
    };
    /** The level's statistics */
    stats: {
        /** The number of likes the level has received */
        likes: number;
        /** The number of downloads the level has received */
        downloads: number;
        /** The number of objects in the level */
        objects: number;
        /** The length of the level */
        length: LevelLength;
    };
    /** The level's coins */
    coins: Coins;
    /** The award the level has recieved */
    award: Award;
    /** The number of orbs the level gives */
    orbs: number;
    /** The number of diamonds the level gives */
    diamonds: number;
    /** The ID of the original level the level was copied from. Only exists if the level was copied */
    original?: number;
    /**
     * Get the full level from its searched counterpart.
     * @returns The full level
     * @async
     */
    resolve(): Promise<Level>;
    /**
     * Gets the level's creator. Will only succeed if the creator is registered
     * @returns The creator if it was registered, otherwise null
     * @async
     */
    getCreator(): Promise<User>;
    /**
     * Gets the top comment on this level
     * @param byLikes Whether to sort by likes or not
     * @returns The most recent or most liked comment made on this level
     * @async
     */
    getComments(byLikes?: boolean): Promise<LevelComment<StatlessSearchedUser>>;
    /**
     * Gets the comments on this level
     * @param byLikes Whether to sort by likes or not
     * @param num The number of comments to get
     * @returns The most recent or most liked comments made on this level
     * @async
     */
    getComments(byLikes: boolean, num: number): Promise<LevelComment<StatlessSearchedUser>[]>;
}
/** A level's raw data */
declare type LevelData = {
    /** The raw level string after decoding and decompressing. Only offered because `gd.js` is not primarily a level API, so this can be passed to your own manipulation program. */
    raw: string;
};
/** Full data for a level */
declare type FullLevelData = LevelData & {
    /** The parsed level data */
    parsed: {
        /** The metadata of the level */
        meta: ParsedData;
        /** An array of objects in the level with numeric key-value pair representations. Each key has a different meaning. For example, 1 is ID, 2 is X position, and 3 is Y position. Friendlier parsing is a WIP. */
        objects: ParsedLevelData[];
    };
};
/**
 * Details about a level, including its full representation
 */
declare class Level extends SearchedLevel {
    /** The level's upload date */
    uploadedAt: GDDate;
    /** The level's update date */
    updatedAt: GDDate;
    /** The level's copying details */
    copy: {
        /** Whether the level can be copied */
        copyable: boolean;
        /** The level's password. Will only be present if the level is copyable and has a password set (i.e. won't be present if either not copyable or free copy) */
        password?: string;
    };
    /** The raw level string before decoding and decompressing. Only offered because `gd.js` is not primarily a level API, so this can be passed to your own manipulation program. */
    data: string;
    /**
     * Decodes the level data
     * @param full Whether to also parse the string level data
     * @returns The level data, with a parsed attribute if a full decode was
     *          requested
     */
    decodeData(full?: false): Promise<LevelData>;
    /**
     * Decodes the level data
     * @param full Whether to also parse the string level data
     * @returns The level data, with a parsed attribute if a full decode was
     *          requested
     */
    decodeData(full: true): Promise<FullLevelData>;
}
/**
 * Details about a level returned from a search, created by a logged in user
 */
declare class LoggedInSearchedLevel extends SearchedLevel {
    creator: LoggedInUser;
    getCreator(): Promise<LoggedInUser>;
    resolve(): Promise<LoggedInLevel>;
    /**
     * Updates the description of the level
     * @param desc The new description of the level
     * @returns Whether setting the new description succeeded
     */
    updateDescription(desc: string): Promise<boolean>;
}
interface LoggedInLevel extends Omit<Level, keyof SearchedLevel> {
}
/**
 * Details about a level, including its full representation and created by a logged in user
 */
declare class LoggedInLevel extends LoggedInSearchedLevel {
}
declare type Order = 'likes' | 'downloads' | 'trending' | 'recent' | 'featured' | 'magic' | 'awarded' | 'hof';
declare type OrderInt = 0 | 1 | 3 | 4 | 6 | 7 | 11 | 16;
/** A search configuration */
declare type BaseSearchConfig = {
    /** The search query string, number (for level ID) or array of numbers (for multiple level IDs) */
    query?: number | number[] | string;
    /**
     * Difficulty level of levels to get. -1 = N/A, 0 = Auto, 1 = Easy, 2 = Normal, 3 = Hard, 4 = Harder, 5 = Insane.
     * If searching for demons, 0 = Any, 1 = Easy, 2 = Medium, 3 = Hard, 4 = Insane, 5 = Extreme
     */
    difficulty?: RawDifficulty | Difficulty | (RawDemonDifficulty | DemonDifficulty)[] | RawDemonDifficulty | DemonDifficulty;
    /** How to order the levels. Some values currently unsupported. Can pass either a sorting ID or its pretty name. Misconfiguration of this setting will yield no results. */
    orderBy?: Order | OrderInt;
    /** Whether the level to search for should be a demon. This will modify the behavior of the difficulty option. */
    demon?: boolean;
    /** The award to filter levels by. 2 = Feature, 3 = Epic. Can also pass string value. */
    award?: 2 | 3 | 'Feature' | 'Epic';
    /** The lengths of the levels to get. Can pass a length ID, its pretty name, or an array containing lengths to get. */
    length?: RawLevelLength | PrettyLevelLength | (RawLevelLength | PrettyLevelLength)[];
    /** Whether to only get original levels */
    original?: boolean;
    /** Whether to only get levels with two-player support */
    twoPlayer?: boolean;
    /** Whether to only get levels with coins */
    coins?: boolean;
};
declare type NonDemonDiffConfig = {
    difficulty?: RawDifficulty | Difficulty | (RawDemonDifficulty | DemonDifficulty)[];
    demon?: false;
};
declare type DemonDiffConfig = {
    difficulty?: RawDemonDifficulty | DemonDifficulty;
    demon: true;
};
declare type SearchConfig = BaseSearchConfig & (NonDemonDiffConfig | DemonDiffConfig);
/**
 * A creator for levels
 */
declare class LevelCreator extends Creator {
    /**
     * Gets a level
     * @param levelID The level name or ID to get
     * @param resolve Whether to get the full level or not. Will cause an extra request.
     * @returns The level with the given ID
     * @async
     */
    get(levelID: string | number, resolve?: false): Promise<SearchedLevel>;
    /**
     * Gets a level
     * @param levelID The level name or ID to get
     * @param resolve Whether to get the full level or not. Will cause an extra request.
     * @returns The level with the given ID
     * @async
     */
    get(levelID: string | number, resolve: true): Promise<Level>;
    /**
     * Search for the by a logged in creator
     * @param creator The logged in creator to get the levels for
     * @param config The query to use when searching for the levels
     * @returns The levels by the provided creator
     * @async
     */
    byCreator(creator: LoggedInUser, config?: Omit<SearchConfig, 'query' | 'orderBy'>): Promise<LoggedInSearchedLevel>;
    /**
     * Search for levels by a logged in creator
     * @param creator The logged in creator to get the levels for
     * @param config The query to use when searching for the levels
     * @param num The number of results to get
     * @returns The levels by the provided creator
     * @async
     */
    byCreator(creator: LoggedInUser, config: Omit<SearchConfig, 'query' | 'orderBy'>, num: number): Promise<LoggedInSearchedLevel[]>;
    /**
     * Search for levels by a creator
     * @param creator The creator to get the levels for
     * @param config The query to use when searching for the levels
     * @param num The number of results to get
     * @returns The levels by the provided creator
     * @async
     */
    byCreator(creator: StatlessSearchedUser | User | number, config?: Omit<SearchConfig, 'query' | 'orderBy'>): Promise<SearchedLevel>;
    /**
     * Search for levels by a creator
     * @param creator The creator to get the levels for
     * @param config The query to use when searching for the levels
     * @param num The number of results to get
     * @returns The levels by the provided creator
     * @async
     */
    byCreator(creator: StatlessSearchedUser | User | number, config: Omit<SearchConfig, 'query' | 'orderBy'>, num: number): Promise<SearchedLevel[]>;
    /**
     * Search for a level with a query
     * @param config The query to use when searching for the level
     * @returns The level that matches the query
     * @async
     */
    search(config: SearchConfig & {
        query: number | string;
    }): Promise<SearchedLevel>;
    /**
     * Search for levels with their numeric IDs
     * @param config The IDs of levels to get
     * @returns The levels with the associated IDs
     * @async
     */
    search(config: SearchConfig & {
        query: number[];
    }): Promise<SearchedLevel[]>;
    /**
     * Search for levels with a query
     * @param config The query to use when searching for the levels
     * @param num The number of results to get
     * @returns The levels that match the query
     * @async
     */
    search(config: SearchConfig & {
        query: string;
    }, num: number): Promise<SearchedLevel[]>;
}
export { SearchedLevel, Level, GDDate, ParsedData, ParsedLevelData, LevelCreator, LoggedInLevel, LoggedInSearchedLevel, SongAuthor, BaseSong, CustomSong, DefaultSong, Song, Difficulty, DemonDifficulty, RawDifficulty, RawDemonDifficulty, DifficultyLevel, RawAward, PrettyAward, Award, RawLevelLength, PrettyLevelLength, LevelLength, Coins, LevelData, FullLevelData, Order, OrderInt, BaseSearchConfig, NonDemonDiffConfig, DemonDiffConfig, SearchConfig };
