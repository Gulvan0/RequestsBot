import { isServer, GDRequestParams } from './util';
import { UserCreator, LevelCreator } from './entities';
import fetch from './node-fetch';
/** @internal */
const DEFAULT_CONFIG = {
    logLevel: 1,
    dbURL: 'http://www.boomlings.com/database',
    fetch
};
/**
 * Client for Geometry Dash requests.
 */
class Client {
    /**
     * Creates a client for Geometry Dash requests.
     * @param config The configuration for the client.
     */
    constructor(config) {
        if (!isServer && !config.corsURL) {
            throw new Error('critical: gd.js cannot function in the browser without a CORS proxy. Please provide a corsURL in the options to fix this issue.');
        }
        this.config = {
            ...DEFAULT_CONFIG,
            ...config
        };
        this.users = new UserCreator(this);
        this.levels = new LevelCreator(this);
    }
    async req(url, { method = 'GET', body = null } = {}, returnRaw = false) {
        let sentBody = null;
        if (body) {
            sentBody = body.resolve();
        }
        const resp = await fetch((isServer ? '' : this.config.corsURL) +
            (url.startsWith('http') ? '' : this.config.dbURL) +
            url, {
            method,
            headers: { 'User-Agent': '' },
            referrerPolicy: 'no-referrer',
            body: sentBody
        });
        if (returnRaw)
            return resp;
        const data = await resp.text();
        this.verbose(`Made a ${method} request to ${url}, response: ${data}`);
        return data;
    }
    /** @internal */
    warn(str) {
        if (this.config.logLevel > 0)
            console.warn(str);
    }
    /** @internal */
    log(str) {
        if (this.config.logLevel > 0)
            console.log(str);
    }
    /** @internal */
    verbose(str) {
        if (this.config.logLevel > 1)
            console.log(str);
    }
}
export { GDRequestParams };
export * from './entities';
export default Client;
