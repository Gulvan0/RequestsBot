import { GDRequestParams } from './util';
import { UserCreator, LevelCreator } from './entities';
import fetch from './node-fetch';
/**
 * Configuration for the GD Client
 */
declare type Config = {
    /** The level of logging. 2 = verbose, 1 = warnings, 0 = off. Defaults to 1. */
    logLevel?: 0 | 1 | 2;
    /** The URL for the database. Defaults to http://www.boomlings.com/database. */
    dbURL?: string;
    /** The URL to use as a CORS proxy when making requests from a browser. Note it should have a trailing slash. */
    corsURL?: string;
    /** The fetch polyfill to use. Only necessary when fetch is not supported in the target environment. Defaults to node-fetch (if installed) */
    fetch?: typeof fetch;
};
/**
 * Configuration for a request to the GD servers
 */
declare type RequestConfig = {
    /** The method for the request */
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    /** The parameters for the request */
    body?: GDRequestParams;
};
/**
 * Client for Geometry Dash requests.
 */
declare class Client {
    /** The database of Geometry Dash users */
    users: UserCreator;
    /** The database of Geometry Dash levels */
    levels: LevelCreator;
    /**
     * Creates a client for Geometry Dash requests.
     * @param config The configuration for the client.
     */
    constructor(config?: Config);
    /**
     * Make a request to a Geometry Dash server. It isn't recommended to use this directly, but if there's
     * some section of the Geometry Dash server API that `gd.js` doesn't provide, this is a good solution.
     *
     * @param url The path to request to (based at the {@link Config.dbURL})
     * @param conf The request configuration
     * @param returnRaw Whether to parse the response into a string or return it raw
     * @return The Response containing the Geometry Dash server's response
     */
    req(url: string, conf: RequestConfig, returnRaw: true): Promise<Response>;
    /**
     * Make a request to a Geometry Dash server.
     *
     * @param url The path to request to (based at the {@link Config.dbURL})
     * @param conf The request configuration
     * @param returnRaw Whether to parse the response into a string or return it raw
     * @return The string containing the Geometry Dash server's response
     */
    req(url: string, conf: RequestConfig, returnRaw?: false): Promise<string>;
}
export { Config, RequestConfig, GDRequestParams };
export * from './entities';
export default Client;
